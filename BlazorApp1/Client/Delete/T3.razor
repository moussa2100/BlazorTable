@using System.Linq.Expressions;
@using System.Reflection;
@using System.Text.Json;
@using Newtonsoft.Json;

@inject HttpClient httpClient
@typeparam T
@typeparam TModel



<PageTitle>Index</PageTitle>
<style>
    .bg-yellow {
        background-color: yellow;
    }
</style>


<div class="row">
    <div class="col-md-3">
        <div class="form-group mb-2">

            <input type="text" class="form-control" @oninput="UpdateFilterText" placeholder="Search" />
        </div>
    </div>
</div>
<table class="table">
    <thead>

        <tr>
            @foreach (string column in columns)
            {
                <th @onclick="() => UpdateSortColumn(column)">
                    @typeof(TModel).GetProperty(column).GetCustomAttribute<DisplayAttribute>()?.Name ?? column


                    @if (ColumnName == column)
                    {
                        @if (IsAscending)
                        {
                            <i class= "bi bi-arrow-down" ></i>
                            UpdateAllData(true);
                        }
                        else
                        {
                            <i class= "bi bi-arrow-up" ></i>
                            UpdateAllData(false);
                        }

                    }
                </th>
            }
        </tr>

    </thead>



     <tbody>
        @foreach (TModel model in empsLoad)
        {
            <tr>
                @foreach (string column in columns)
                {
                    <td> @HighlightText(model.GetType().GetProperty(column).GetValue(model)?.ToString()) </td>
                }
            </tr>
        }
    </tbody>

</table>

<div class="d-flex justify-content-between align-items-center">
    <div>
        Showing @((page - 1) * pageSize + 1)-@((page - 1) * pageSize + @recordsCount) of @recordsCount
    </div>
    <div class="d-flex align-items-center">
        <label for="drp" class="col-auto"> Page Size </label>
        <select id="drp" class="form-select ms-1 col-auto" @bind="pageSize">
            <option value="5">5</option>
            <option value="10">10</option>
            <option value="15">15</option>
            <option value="20">20</option>
        </select>
    </div>
    <div>
        <button class="btn btn-primary" disabled="@(page == 1)" @onclick="firstPage">First</button>
        <button class="btn btn-primary" disabled="@(page == 1)" @onclick="prevPage">Previous</button>
        <button class="btn btn-primary" disabled="@(page == pageCount)" @onclick="nextPage">Next</button>
        <button class="btn btn-primary" disabled="@(page == pageCount)" @onclick="lastPage">Last</button>
    </div>
</div>




@code {

    [Parameter]
        public List<T> Emps { get; set; }


List<T> empsLoad = new();

public string ColumnName { get; set; }
public bool IsAscending { get; set; } = true;
public string filterText { get; set; }

//page size
public int page = 1;
public int pageSize = 5;
private int pageCount = 0;
private int recordsCount = 0;

public void firstPage()
{
    page = 1;
    UpdateAllData();
}
public void prevPage()
{
    page--;
    UpdateAllData();
}
public void nextPage()
{
    page++;
    UpdateAllData();
}
public void lastPage()
{
    page = pageCount;
    UpdateAllData();
}

//Get columns Headers
List<string> columns = new List<string>();

protected override void OnInitialized()
{
    columns = typeof(T).GetProperties().Select(p => p.Name).ToList();

    ColumnName = columns.First();

    UpdateAllData();
}

public async Task UpdateAllData(bool isAscendingVal = false)
{
    if (string.IsNullOrEmpty(filterText))
    {
        empsLoad = Emps;

        recordsCount = empsLoad.Count;
        pageCount = (int)Math.Ceiling((double)empsLoad.Count / pageSize);

        //Manage Sorting before paging

        if (isAscendingVal)
        {
            empsLoad = empsLoad.OrderBy(e => e.GetType().GetProperty(ColumnName)?.GetValue(e)).ToList();
        }
        else
        {
            empsLoad = empsLoad.OrderByDescending(e => e.GetType().GetProperty(ColumnName)?.GetValue(e)).ToList();
        }

        //------End of sorting

        empsLoad = empsLoad.Skip((page - 1) * pageSize).Take(pageSize).ToList();
    }
    else
    {
        empsLoad = Emps.Where(c =>
            columns.Any(column => c.GetType().GetProperty(column)?.GetValue(c)?.ToString()?.ToLower()?.Contains(filterText) ?? false)
        ).ToList();

        recordsCount = empsLoad.Count;
        pageCount = (int)Math.Ceiling((double)empsLoad.Count / pageSize);

        //Manage Sorting before paging

        if (isAscendingVal)
        {
            empsLoad = empsLoad.OrderBy(e => e.GetType().GetProperty(ColumnName)?.GetValue(e)).ToList();
        }
        else
        {
            empsLoad = empsLoad.OrderByDescending(e => e.GetType().GetProperty(ColumnName)?.GetValue(e)).ToList();
        }

        //------End of sorting

        empsLoad = empsLoad.Skip((page - 1) * pageSize).Take(pageSize).ToList();
    }

    await Task.CompletedTask;
}

private void UpdateSortColumn(string columnName)
{
    if (ColumnName == columnName)
    {
        IsAscending = !IsAscending;
    }
    else
    {
        ColumnName = columnName;
        IsAscending = true;
    }

    if (IsAscending)
    {
        UpdateAllData(true);
    }
    else
    {
        UpdateAllData(false);
    }
}

private void UpdateFilterText(ChangeEventArgs e)
{
    filterText = e.Value.ToString().ToLower();

    UpdateAllData();
}

    private MarkupString HighlightText(string text)
    {
        if (string.IsNullOrEmpty(filterText))
        {
            return new MarkupString(text);
        }

        int index = text.IndexOf(filterText, StringComparison.OrdinalIgnoreCase);

        if (index < 0)
        {
            return new MarkupString(text);
        }

        string before = text.Substring(0, index);
        string match = text.Substring(index, filterText.Length);
        string after = text.Substring(index + filterText.Length);

        string highlightedText = $"{before}<span class='bg-yellow'>{match}</span>{after}";

        return new MarkupString(highlightedText);
    }
    }
