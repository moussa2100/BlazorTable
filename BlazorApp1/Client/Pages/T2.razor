@using Newtonsoft.Json;
@using System.Collections.Generic;
@using System.Linq;
@using System.Reflection;

@inject HttpClient httpClient

<div class="row">
    <div class="col-md-3">
        <div class="form-group mb-2">
            <input type="text" class="form-control" @oninput="UpdateFilterText" placeholder="Search" />
        </div>
    </div>
</div>
<table class="table">
    <thead>
        <tr>
            @foreach (string column in Columns)
            {
                <th @onclick="() => UpdateSortColumn(column)">
                    @column
                    @if (ColumnName == column)
                    {
                        @if (IsAscending)
                        {
                            <i class="bi bi-arrow-down"></i>
                            UpdateAllData(true);
                        }
                        else
                        {
                            <i class="bi bi-arrow-up"></i>
                            UpdateAllData(false);
                        }
                    }
                </th>
            }
        </tr>
    </thead>
    <tbody>
        @foreach (var row in Rows)
        {
            <tr>
                @foreach (var cell in row)
                {
                    <td>@HighlightText(cell.ToString())</td>
                }
            </tr>
        }
    </tbody>
</table>

<div class="d-flex justify-content-between align-items-center">
    <div>
        Showing @((page - 1) * pageSize + 1)-@((page - 1) * pageSize + @recordsCount) of @recordsCount
    </div>
    <div class="d-flex align-items-center">
        <label for="drp" class="col-auto"> Page Size </label>
        <select id="drp" class="form-select ms-1 col-auto" @bind="pageSize">
            <option value="5">5</option>
            <option value="10">10</option>
            <option value="15">15</option>
            <option value="20">20</option>
        </select>
    </div>
    <div>
        <button class="btn btn-primary" disabled="@(page == 1)" @onclick="firstPage">First</button>
        <button class="btn btn-primary" disabled="@(page == 1)" @onclick="prevPage">Previous</button>
        <button class="btn btn-primary" disabled="@(page == pageCount)" @onclick="nextPage">Next</button>
        <button class="btn btn-primary" disabled="@(page == pageCount)" @onclick="lastPage">Last</button>
    </div>
</div>

@code {

        [Parameter]
        public List<string> Columns { get; set; }

        [Parameter]
        public List<List<object>> Rows { get; set; }

    private string ColumnName { get; set; } = string.Empty;
    private bool IsAscending { get; set; } = true;
    private string filterText { get; set; }

    //page size
    private int page = 1;
    private int pageSize = 5;
    private int pageCount = 0;
    private int recordsCount = 0;

    public void firstPage()
    {
        page = 1;
        UpdateAllData();
    }

    public void prevPage()
    {
        page--;
        UpdateAllData();
    }

    public void nextPage()
    {
        page++;
        UpdateAllData();
    }

    public void lastPage()
    {
        page = pageCount;
        UpdateAllData();
    }


    private async Task UpdateAllData(bool isAscendingVal = false)
    {
        if (string.IsNullOrEmpty(filterText))
        {
            recordsCount = Rows.Count;
            pageCount = (int)Math.Ceiling((double)recordsCount / pageSize);

            //Manage Sorting before paging
            if (!string.IsNullOrEmpty(ColumnName))
            {
                if (isAscendingVal)
                {
                    Rows = Rows.OrderBy(row => row[Columns.IndexOf(ColumnName)]).ToList();
                }
                else
                {
                    Rows = Rows.OrderByDescending(row => row[Columns.IndexOf(ColumnName)]).ToList();
                }
            }
            //------End of sorting

            Rows = Rows.Skip((page - 1) * pageSize).Take(pageSize).ToList();

        }
        else
        {
            List<List<object>> filteredRows = new();
            foreach (var row in Rows)
            {
                bool found = false;
                foreach (var cell in row)
                {
                    if (cell != null && cell.ToString().ToLower().Contains(filterText))
                    {
                        filteredRows.Add(row);
                        found = true;
                        break;
                    }
                }
                if (!found)
                {
                    filteredRows.Add(null);
                }
            }

            filteredRows.RemoveAll(row => row == null);

            recordsCount = filteredRows.Count;
            pageCount = (int)Math.Ceiling((double)recordsCount / pageSize);

            //Manage Sorting before paging
            if (!string.IsNullOrEmpty(ColumnName))
            {
                if (isAscendingVal)
                {
                    filteredRows = filteredRows.OrderBy(row => row[Columns.IndexOf(ColumnName)]).ToList();
                }
                else
                {
                    filteredRows = filteredRows.OrderByDescending(row => row[Columns.IndexOf(ColumnName)]).ToList();
                }
            }
            //------End of sorting

            filteredRows = filteredRows.Skip((page - 1) * pageSize).Take(pageSize).ToList();

            Rows = filteredRows;
        }

        await Task.CompletedTask;
    }

    private void UpdateSortColumn(string columnName)
    {
        if (ColumnName == columnName)
        {
            IsAscending = !IsAscending;
        }
        else
        {
            ColumnName = columnName;
            IsAscending = true;
        }

        if (IsAscending)
        {
            UpdateAllData(true);
        }
        else
        {
            UpdateAllData(false);
        }
    }

    private void UpdateFilterText(ChangeEventArgs e)
    {
        filterText = e.Value.ToString().ToLower();

        UpdateAllData();
    }

    private MarkupString HighlightText(string text)
    {
        if (string.IsNullOrEmpty(filterText))
        {
            return new MarkupString(text);
        }

        int index = text.IndexOf(filterText, StringComparison.OrdinalIgnoreCase);

        if (index < 0)
        {
            return new MarkupString(text);
        }

        string before = text.Substring(0, index);
        string match = text.Substring(index, filterText.Length);
        string after = text.Substring(index + filterText.Length);

        string highlightedText = $"{before}<span class='bg-yellow'>{match}</span>{after}";

        return new MarkupString(highlightedText);
    }
}